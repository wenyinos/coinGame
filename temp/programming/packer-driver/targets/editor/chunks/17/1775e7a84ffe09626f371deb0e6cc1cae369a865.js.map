{"version":3,"sources":["file:///D:/MyCoding/Cosos/coinGame/assets/scripts/frame/managers/ResMgr.ts"],"names":["ResMgr","assetManager","ImageAsset","instantiate","NodePool","Texture2D","AssetType","GLOBALS","bundle","_jsonAssetMap","_clipMap","_uiMap","_abBundleMap","_atlasMap","_textureCubeMap","_spriteMap","_textureMap","_loadStemp","loadTime","_totalTime","_dictPool","_dictPrefab","loadingRate","_debug","getNode","prefab","parent","pos","tempPre","name","console","log","data","node","hasOwnProperty","pool","size","get","active","position","putNode","isActive","put","clearPool","clear","setPrefab","clearDict","printTimer","end","Date","now","loadBundle","index","ratio","Promise","resolve","reject","err","str","loadRes","type","rate","self","loadDir","path","finished","total","assets","asset","UiPrefab","i","length","Prefab","Sound","Sprite","Json","json","Atlas","loadBgm","load","bgm","loadPrefab","info","preloadRes","count","pre","getSprites","getAtlas","getUI","Path","Parent","layer2D","layer","children","ParentNode","getPrefab","putUI","getChildByName","prefabPath","getJson","getClip","getTexture","getTextureCube","createTexture2DWtihImageAsset","imgAsset","addRef","texture","id","_uuid","uuid","getTexture2DUUID","has","image","_nativeUrl","add","dependUtil","_depends","deps","nativeDep","setMipFilter","Filter","NONE","setFilters","LINEAR","setWrapMode","WrapMode","CLAMP_TO_EDGE","getNewImageAsset","url","nativeAsset","getSpriteFrameUUID","key","getImageUUID","RES"],"mappings":"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","sourcesContent":["\r\nimport { AssetManager, assetManager, AudioClip, ImageAsset, instantiate,  Node, NodePool, Prefab,  SpriteAtlas, SpriteFrame, Texture2D, TextureCube, Vec3 } from \"cc\"\r\nimport { AssetType, uiInterface } from \"../Enums\";\r\nimport GLOBALS from \"../Globals\";\r\nconst bundle = \"Bundle\";\r\n/**\r\n * @Description: resources manager and pool manager\r\n * @return {*}\r\n */\r\nclass ResMgr {\r\n    public _jsonAssetMap: { [key: string]: Object } = {};\r\n    public _clipMap: { [key: string]: AudioClip } = {};\r\n    public _uiMap: { [key: string]: Node } = {};\r\n\r\n    private _abBundleMap: { [key: string]: AssetManager.Bundle } = {};\r\n    private _atlasMap: { [key: string]: SpriteAtlas } = {};\r\n    private _textureCubeMap: { [key: string]: TextureCube } = {};\r\n    private _spriteMap: { [key: string]: SpriteFrame } = {};\r\n\r\n    private _textureMap: { [key: string]: Texture2D } = {};\r\n\r\n    private _loadStemp = null;\r\n    private loadTime = 0;\r\n    private _totalTime = 0\r\n\r\n    private _dictPool: { [key: string]: NodePool } = {}\r\n    private _dictPrefab: { [key: string]: Prefab } = {}\r\n\r\n    loadingRate = 0;\r\n    _debug = false;\r\n\r\n    /**\r\n     * @description: get the node from the pool\r\n     * @param {Prefab} prefab\r\n     * @param {Node} parent\r\n     * @param {Vec3} pos\r\n     * @return {*}\r\n     */\r\n    public getNode (prefab: Prefab | string, parent?: Node, pos?: Vec3): Node {\r\n\r\n        let tempPre;\r\n        let name;\r\n        if (typeof prefab === 'string') {\r\n            tempPre = this._dictPrefab[prefab];\r\n            name = prefab;\r\n            if (!tempPre) {\r\n                console.log(\"Pool invalid prefab name = \", name);\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            tempPre = prefab;\r\n            name = prefab.data.name;\r\n        }\r\n\r\n        let node = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //own this pool\r\n            let pool = this._dictPool[name];\r\n            if (pool.size() > 0) {\r\n                node = pool.get();\r\n            } else {\r\n                node = instantiate(tempPre);\r\n            }\r\n        } else {\r\n            //create new pool\r\n            let pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n\r\n            node = instantiate(tempPre);\r\n        }\r\n\r\n        if (parent) {\r\n            node.parent = parent;\r\n            node.active = true;\r\n            if (pos) node.position = pos;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n\r\n    /**\r\n     * @description: put the node into the pool\r\n     * @param {Node} node\r\n     * @param {*} isActive\r\n     * @return {*}\r\n     */\r\n    public putNode (node: Node | null, isActive = false) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        let name = node.name;\r\n        let pool = null;\r\n        // node.active = isActive\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            pool = this._dictPool[name];\r\n        } else {\r\n            pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n        }\r\n\r\n        pool.put(node);\r\n    }\r\n\r\n    /**\r\n     * @description: clear the pool based on name\r\n     * @param {string} name\r\n     * @return {*}\r\n     */\r\n    public clearPool (name: string) {\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            let pool = this._dictPool[name];\r\n            pool.clear();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en : set prefab to dictionary\r\n     * @cn : 目录中存储预支体信息\r\n     * @param {string} name\r\n     * @param {Prefab} prefab\r\n     */\r\n    public setPrefab (name: string, prefab: Prefab): void {\r\n        if (!this._dictPrefab[name]) {\r\n            this._dictPrefab[name] = prefab;\r\n        }\r\n    }\r\n\r\n    public clearDict () {\r\n        this._dictPrefab = {};\r\n    }\r\n\r\n    printTimer (name: string = \"\", end = false) {\r\n        this.loadTime = Date.now() - this._loadStemp;\r\n        this._loadStemp = Date.now();\r\n        this._totalTime += this.loadTime\r\n        console.log(name + \"，load time===\", this.loadTime, \"ms\")\r\n        if (end) {\r\n            console.log(\"Load finish, total time===\", this._totalTime, \"ms\")\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @description: Load assetbundle based on index\r\n     * @param {number} index\r\n     * @param {number} ratio\r\n     * @return {*}\r\n     */\r\n    public async loadBundle (index: number, ratio: number): Promise<void> {\r\n        if (!this._loadStemp) this._loadStemp = Date.now();\r\n        const name = bundle + index\r\n        return new Promise<void>((resolve, reject) => {\r\n            if(this._abBundleMap[index] ){\r\n                resolve && resolve();\r\n            }\r\n            assetManager.loadBundle(name, (err: any, bundle: any) => {\r\n                if (err) {\r\n                    const str = \"bundle\" + index + \" load error, error==\" + err\r\n                    console.log(str)\r\n                } else {\r\n                    this._abBundleMap[index] = bundle;\r\n                    this.printTimer(\"bundle\" + index + \"__\" + \"load success\")\r\n                    this.loadingRate += ratio;\r\n                    resolve && resolve();\r\n                }\r\n            })\r\n        })\r\n    }\r\n    /**\r\n     * @name: Load any res\r\n     * @param {index} bunlde index\r\n     * @param {type} res type from AssetType\r\n     * @param {ratio} Res Loading ratiro, make sure the amount of all ratios is less than 1.0\r\n     */\r\n    public async loadRes (index: number, type: any, ratio: number = 0): Promise<void> {\r\n        const rate = this.loadingRate;\r\n        const self = this;\r\n        return new Promise<void>((resolve, reject) => {\r\n            this._abBundleMap[index].loadDir(type.path, type.type, (finished: number, total: number) => {\r\n                // this._loadUtils.setValue(idx, finished / total); \r\n                if (ratio > 0) this.loadingRate = rate + ratio * finished / total\r\n            }, (err: any, assets: any[]) => {\r\n                if (err) {\r\n                    const str = \"Res Error ===\" + err\r\n                    console.log(str);\r\n                    resolve && resolve();\r\n                }\r\n                let asset: any\r\n                switch(type){\r\n                    case AssetType.UiPrefab:\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i] as Prefab;\r\n                            const name = asset.data.name as string;\r\n                            this.setPrefab(name, asset);\r\n                            console.log(\"ui prefab name==\", name)\r\n                        }\r\n                        break\r\n                    case AssetType.Prefab:\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            this.setPrefab(asset.data.name, asset);\r\n                            this._debug&& console.log(\"prefab name==\", asset.data.name)\r\n                        }\r\n                    break;\r\n                    case AssetType.Sound:\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            this._debug&& console.log(\"clip name==\", asset.name)\r\n                            if (!self._clipMap[asset.name]) self._clipMap[asset.name] = asset;\r\n                        }\r\n                    break;\r\n                    case AssetType.Sprite:\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            console.log(\"sprite name==\", asset.name)\r\n                            if (!this._spriteMap[asset.name]) this._spriteMap[asset.name] = asset;\r\n                        }\r\n                        break \r\n                    case AssetType.Json:\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            this._debug&& console.log(\"json name==\", asset.name)\r\n                            if (!self._jsonAssetMap[asset.name]) self._jsonAssetMap[asset.name] = asset.json;\r\n                        }\r\n                    break;\r\n                    case AssetType.Atlas:\r\n                        for (let i = 0; i < assets.length; i++) {\r\n                            asset = assets[i];\r\n                            this._debug&& console.log(\"atlas name==\", asset.name)\r\n                            if (!self._atlasMap[asset.name]) self._atlasMap[asset.name] = asset;\r\n                        }\r\n                    break;\r\n            \r\n                }\r\n\r\n                self.printTimer(\"Bundle\" + index + \"__\" + type.path + \"loaded success\")\r\n                resolve && resolve();\r\n            })\r\n        })\r\n    }\r\n\r\n    public async loadBgm (): Promise<void> {\r\n        let self = this\r\n        return new Promise<void>((resolve, reject) => {\r\n            this._abBundleMap[5].load(\"bgm\", function (err, bgm: AudioClip) {\r\n                if (err) {\r\n                    console.log(\"Error info===\", err);\r\n                    resolve && resolve();\r\n                }\r\n                if (!self._clipMap[bgm.name]) self._clipMap[bgm.name] = bgm\r\n                resolve && resolve();\r\n            })\r\n        }\r\n        )\r\n    }\r\n\r\n\r\n    /**\r\n   * @name: load any prefab\r\n   * @param {index} bunlde index\r\n   * @param {type} res type\r\n   * @param {ratio} Res Loading ratiro, make sure the amount of all ratios is less than 1.0\r\n   */\r\n    public async loadPrefab (info): Promise<void> {\r\n        const rate = this.loadingRate;\r\n        return new Promise<void>((resolve, reject) => {\r\n            this._abBundleMap[info.bundle].load(info.path + info.name, function (err, Prefab) {\r\n                if (err) {\r\n                    console.log(\"wrong prefab info ===\", err);\r\n                    resolve && resolve();\r\n                }\r\n                this.setPrefab(info.name, Prefab);\r\n\r\n                resolve && resolve();\r\n            })\r\n        }\r\n        )\r\n    }\r\n\r\n    /** \r\n     * pre load&&make prefabs\r\n    */\r\n    public async preloadRes (name: string, count: number, ratio: number = 0): Promise<void> {\r\n        const rate = this.loadingRate;\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let pre = this._dictPrefab[name];\r\n            for (let i = 0; i < count; i++) {\r\n                this.putNode(instantiate(pre));\r\n            }\r\n            if (ratio > 0) this.loadingRate = rate + ratio\r\n            this.printTimer(\"preload_\" + name)\r\n            resolve && resolve();\r\n        })\r\n    }\r\n    public getSprites(name: string): SpriteFrame {\r\n        return this._spriteMap[name]||null;\r\n    }\r\n    public getAtlas (name: string): SpriteAtlas {\r\n        return this._atlasMap[name];\r\n    }\r\n\r\n    public async getUI(Path:uiInterface, Parent?: Node) {\r\n        if (Path.clear) {\r\n            if (!Parent && GLOBALS.layer2D[Path.layer].children[0]) {\r\n                if (GLOBALS.layer2D[Path.layer].children[0].name == Path.name) return\r\n                this.putNode(GLOBALS.layer2D[Path.layer].children[0])\r\n            }\r\n        }\r\n        let ParentNode = Parent ? Parent : GLOBALS.layer2D[Path.layer]\r\n        return await this.getPrefab(Path, ParentNode)\r\n    }\r\n    public putUI(Path:uiInterface){\r\n        const node =GLOBALS.layer2D[Path.layer].getChildByName(Path.name);\r\n        if(node){\r\n            this.putNode(node);\r\n        }\r\n        \r\n    }\r\n\r\n    public async getPrefab (prefabPath: any, parent?: Node) {\r\n        if (this._dictPrefab[prefabPath.name]) {\r\n            return this.getNode(prefabPath.name, parent)\r\n        }\r\n        await this.loadPrefab(prefabPath)\r\n        return this.getNode(prefabPath.name, parent)\r\n\r\n    }\r\n\r\n    /**\r\n     * @en : get json asset that loaded\r\n     * @cn : 获取加载过的json\r\n     * @param {string} name\r\n     */\r\n    public getJson (name: string): any {\r\n        return this._jsonAssetMap[name];\r\n    }\r\n    /**\r\n     * @en : get clip that loaded\r\n     * @cn : 获取加载过的clip\r\n     * @param {string} name\r\n     */\r\n    public getClip (name: string): AudioClip {\r\n        return this._clipMap[name];\r\n    }\r\n    /**\r\n     * @en : get texture that loaded\r\n     * @cn : 获取加载过的texture\r\n     * @param {string} name\r\n     */\r\n    public getTexture (name: string): Texture2D {\r\n        return this._textureMap[name];\r\n    }\r\n    /**\r\n     * @en : get texturecube that loaded\r\n     * @cn : 获取加载过的texturecube\r\n     * @param {string} name\r\n     */\r\n    public getTextureCube (name: string): TextureCube {\r\n        return this._textureCubeMap[name];\r\n    }\r\n\r\n\r\n    /**\r\n     * @Date: 2022-08-03 12:25:53\r\n     * @LastEditors: iwae\r\n     * @description: 通过ImageAsset 创建一个Texture2D\r\n     * @param {ImageAsset} imgAsset\r\n     */\r\n    public createTexture2DWtihImageAsset (imgAsset: ImageAsset, addRef = true): Texture2D {\r\n        let texture: Texture2D = null;\r\n        let id;\r\n        if (imgAsset._uuid != \"''\" && imgAsset._uuid != null && imgAsset._uuid.length > 0) {\r\n            id = imgAsset._uuid;\r\n        } else {\r\n            id = imgAsset.name;\r\n        }\r\n\r\n        const uuid = this.getTexture2DUUID(id);\r\n\r\n        if (assetManager.assets.has(uuid)) {\r\n            texture = assetManager.assets.get(uuid) as Texture2D;\r\n            // let image = texture.image;\r\n            // image.addRef();\r\n        } else {\r\n            console.log(\"not exist\", uuid)\r\n            texture = new Texture2D();\r\n            texture.image = imgAsset;\r\n            // imgAsset.addRef();\r\n            texture._uuid = uuid;\r\n            texture._nativeUrl = '';\r\n            assetManager.assets.add(texture._uuid, texture);\r\n            assetManager.dependUtil._depends.add(texture._uuid, { deps: [imgAsset._uuid], nativeDep: [] });\r\n            texture.setMipFilter(Texture2D.Filter.NONE);\r\n            texture.setFilters(Texture2D.Filter.LINEAR, Texture2D.Filter.LINEAR);\r\n            texture.setWrapMode(Texture2D.WrapMode.CLAMP_TO_EDGE, Texture2D.WrapMode.CLAMP_TO_EDGE);\r\n        }\r\n\r\n        if (addRef) { texture.addRef(); }\r\n\r\n        return texture;\r\n    }\r\n\r\n    public getNewImageAsset (url: string, nativeAsset?): ImageAsset {\r\n        let uuid = url;\r\n        let imgAsset: ImageAsset\r\n        if (assetManager.assets.has(uuid)) {\r\n            console.log(\"exist imgae\", uuid)\r\n            imgAsset = assetManager.assets.get(uuid) as ImageAsset;\r\n        }\r\n        else {\r\n            console.log(\"new imgae\", uuid)\r\n            imgAsset = nativeAsset ? new ImageAsset(nativeAsset) : new ImageAsset();\r\n            imgAsset._uuid = uuid;\r\n            assetManager.assets.add(imgAsset._uuid, imgAsset);\r\n            imgAsset._nativeUrl = imgAsset._uuid;\r\n            assetManager.dependUtil._depends.add(imgAsset._uuid, { deps: [], nativeDep: [] });\r\n        }\r\n        imgAsset.addRef();\r\n        return imgAsset;\r\n    }\r\n\r\n    public getSpriteFrameUUID (key: string): string {\r\n        return `${key}@f9941`;\r\n    }\r\n    public getTexture2DUUID (key: string): string {\r\n        return `${key}@6c48a`;\r\n    }\r\n    public getImageUUID (key: string): string {\r\n        return `${key}@76234`;\r\n    }\r\n\r\n\r\n}\r\n\r\nconst RES = new ResMgr;\r\n\r\nexport default RES;"]}