{"version":3,"sources":["file:///D:/MyCoding/Cosos/coinGame/assets/scripts/frame/input/InputCtrl.ts"],"names":["InputCtrl","getComboName","keys","label","forEach","key","length","keyCode","KeyCode","replace","arraysEqual","a","b","i","director","game","input","Input","sys","responseTime","maxCombo","constructor","h","v","mag","jump","rad","joystick","rap","isPlaying","keyEventMap","Map","keyState","tempCombo","tempBinding","keyBindingMap","timer","lastKeyTime","isMobile","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","self","document","addEventListener","isHidden","hidden","clearTimeout","add","eventName","combo","keyEvent","config","get","removeKey","keyConfig","event","set","addKey","string","clear","remove","delete","updateConfig","altlabel","console","log","sort","binding","duplicate","emit","keyString","clearBinding","updateBinding","name","getKeys","actions","push","handleBindingConfig","keystate","cb","down","bindingConfig","time","totalTime","deltaTime","shift","setTimeout","onKeyPress","up","CTRL"],"mappings":"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","sourcesContent":["\r\nimport { director, EventKeyboard, game, input, Input, KeyCode, Label, sys } from 'cc';\r\n\r\nconst responseTime = 150;/* in unit of ms */\r\nconst maxCombo = 3; /* limit of combo length */\r\n\r\nexport type KeyEvent = {\r\n    down?: Function\r\n    press?: Function\r\n    up?: Function\r\n}\r\nexport type KeyCombo = KeyCode[];\r\n\r\nexport type KeyBinding = {\r\n    combo: KeyCombo,\r\n    event: KeyEvent,\r\n    label?: Label;\r\n}\r\nexport type BindingConfig = {\r\n    name: string,\r\n    label?: Label\r\n}\r\n/**\r\n * @en : return the concet names from key comb\r\n * @cn : 返回组合键的名字\r\n * @param {KeyCombo} keys\r\n */\r\nexport function getComboName(keys: KeyCombo) {\r\n    let label = \"\";\r\n    keys.forEach((key) => {\r\n        if (label.length > 0) {\r\n            label += \"+\";\r\n        }\r\n        let keyCode = KeyCode[key].replace(\"KEY_\", \"\");\r\n        keyCode = keyCode.replace(\"DIGIT_\", \"\");\r\n        label += keyCode;\r\n    })\r\n    return label;\r\n}\r\n/**\r\n * @en : to identify if 2 arrays' contents are equal\r\n * @cn : 判断2个数组内的内容是否一致\r\n * @param {any} a\r\n * @param {any} b\r\n */\r\nfunction arraysEqual(a: any[], b: any[]): boolean {\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nclass InputCtrl {\r\n    public h = 0\r\n    public v = 0\r\n    public mag = 1;\r\n    public jump = false;\r\n    public rad = 0;\r\n    public joystick = false;\r\n    public rap = false;\r\n    public isPlaying = false;\r\n\r\n    private keyEventMap = new Map<KeyCombo, KeyEvent>;\r\n    private keyState = new Map<KeyCode, boolean>;\r\n    private tempCombo: KeyCombo = [];\r\n    private tempBinding: BindingConfig = null;\r\n    private keyBindingMap = new Map<string, KeyBinding>;\r\n    private timer = null;\r\n    private lastKeyTime = 0;\r\n\r\n    constructor() {\r\n        if (!sys.isMobile) {\r\n            input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n            input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\r\n            var self = this;\r\n            document.addEventListener('visibilitychange', function () {\r\n                var isHidden = document.hidden;\r\n                if (isHidden) {\r\n                    if(self.timer){\r\n                        clearTimeout(self.timer);\r\n                    }\r\n                    self.h = self.v = 0;\r\n                    self.mag = 1;\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en : add new key binding \r\n     * @cn : 添加新的按键注册\r\n     * @param {string} eventName  event Name\r\n     * @param {KeyCombo} combo  keys, could be combos\r\n     * @param {KeyEvents} keyEvent key events\r\n     * @param {Label} label label\r\n     */\r\n    add(eventName: string, combo: KeyCombo, keyEvent: KeyEvent, label?: Label) {\r\n        const config = this.keyBindingMap.get(eventName);\r\n        if (config) {\r\n            this.removeKey(config.combo);\r\n        }\r\n        const keyConfig: KeyBinding = { combo: combo, event: keyEvent, label: label };\r\n        this.keyBindingMap.set(eventName, keyConfig);\r\n        this.addKey(combo, keyEvent);\r\n        if (label) {\r\n            label.string = getComboName(combo);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en : clear a binding event\r\n     * @cn : 清除绑定的事件\r\n     * @param {string} eventName\r\n     */\r\n    clear(eventName: string) {\r\n        const config = this.keyBindingMap.get(eventName);\r\n        if (config) {\r\n            config.combo.length = 0;\r\n            if (config.label) {\r\n                config.label.string = \"\";\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n \r\n    /**\r\n     * @en : remove key binding\r\n     * @cn : 移除按键注册\r\n     * @param {string} eventName\r\n     */\r\n    remove(eventName: string) {\r\n        const config = this.keyBindingMap.get(eventName);\r\n        if (config) {\r\n            this.removeKey(config.combo);\r\n            this.keyBindingMap.delete(eventName);\r\n            if (config.label) {\r\n                config.label.string = \"\";\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @en : get config map\r\n     * @cn : 获取按键事件\r\n     * @param {string} eventName\r\n     */\r\n    get(eventName: string) {\r\n        return this.keyBindingMap.get(eventName) || null;\r\n    }\r\n\r\n    /**\r\n     * @en :update key binding\r\n     * @cn :更改绑定按键\r\n     * @param string eventName \r\n     * @param {KeyCombo} combo new key combo\r\n     * @param {Label} altlabel 是否更新文本\r\n     */\r\n    updateConfig(eventName: string, combo: KeyCombo, altlabel?: Label) {\r\n        const config = this.keyBindingMap.get(eventName);\r\n        if (!config) {\r\n            console.log(\"no event founded==\", eventName);\r\n            return this;\r\n        }\r\n        combo.sort();\r\n        for (let key of this.keyBindingMap.keys()) {\r\n            const binding = this.keyBindingMap.get(key);\r\n            const duplicate = arraysEqual(binding.combo,combo);\r\n            if(duplicate){\r\n                director.emit(\"duplicateKey\",key);\r\n                this.clear(key);\r\n                break;\r\n            }\r\n        }\r\n        config.combo.length = 0;\r\n        for (var i = 0; i < combo.length; i++) {\r\n            config.combo[i] = combo[i];\r\n        }\r\n        const keyString = getComboName(combo);\r\n        if (config.label) {\r\n            config.label.string = keyString;\r\n        }\r\n        if (altlabel) {\r\n            altlabel.string = keyString;\r\n        }\r\n      \r\n        return this;\r\n    }\r\n    /**\r\n     * @en : clear temp binding and binding state\r\n     * @cn : 清楚绑定状态\r\n     */\r\n    clearBinding(){\r\n        this.tempBinding  =null;\r\n    }\r\n\r\n    /**\r\n     * @en : updating new binding\r\n     * @cn : 实时更新新的界面\r\n     * @param {string} name binding name\r\n     * @param {Label} label binding label if label, the label will be updated\r\n     */\r\n    updateBinding(name:string,label?:Label){\r\n        this.tempBinding =  { name: name, label: label };\r\n    }\r\n\r\n    /**\r\n     * @en : get all binding keys in array\r\n     * @cn : 获取所有的绑定键数组\r\n     */\r\n    getKeys(){\r\n        let actions = []\r\n        for (let key of this.keyBindingMap.keys()) {\r\n            actions.push(key);\r\n        }\r\n        return actions;\r\n    }\r\n\r\n    /**\r\n     * @Description: add new combo with event\r\n     * @param {KeyCode} keys use array for combination keys use single Keycode for single Key\r\n     * @param {KeyEvents} event\r\n     * @return {*}\r\n     */\r\n    private addKey(combo: KeyCombo, event: KeyEvent) {\r\n        combo.sort();\r\n        this.keyEventMap.set(combo, event);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en : remove combo\r\n     * @cn : 删除按键组合\r\n     * @param {KeyCombo} combo\r\n     */\r\n    private removeKey(combo: KeyCombo) {\r\n        \r\n        this.keyEventMap.delete(combo);\r\n        return this;\r\n    }\r\n \r\n\r\n    protected onKeyDown(event: EventKeyboard) {\r\n        const keyCode = event.keyCode;\r\n        if(this.tempBinding){\r\n\r\n            this.handleBindingConfig(keyCode);\r\n\r\n            return;\r\n        }\r\n       \r\n        this.keyState.set(keyCode, true);\r\n        for (let keys of this.keyEventMap.keys()) {\r\n            let keystate = false;\r\n            let length = keys.length;\r\n            for (var i = 0; i < length; i++) {\r\n                const key = keys[i];\r\n                keystate = this.keyState.get(key);\r\n                if (!keystate) {\r\n                    break;\r\n                }\r\n            }\r\n            if (keystate) {\r\n                this.keyState.set(keyCode, false);\r\n                const cb = this.keyEventMap.get(keys);\r\n                if (cb.down) cb.down();\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n    /**\r\n     * @en : handle the keys combo that pressed within the responsetime\r\n     * @cn : 处理相应时间内的的按键组合\r\n     * @param {KeyCode} keyCode\r\n     */\r\n    private handleBindingConfig(keyCode:KeyCode){\r\n        const bindingConfig = this.tempBinding;\r\n            const time = game.totalTime;\r\n            const deltaTime = time - this.lastKeyTime;\r\n            /* clear tempCombo if delta time too long */\r\n            if (deltaTime > responseTime) {\r\n                this.tempCombo.length = 0;\r\n            }\r\n            if (this.tempCombo.length >= maxCombo) {\r\n                this.tempCombo.shift();\r\n            }\r\n            this.tempCombo.push(keyCode);\r\n            const name = bindingConfig.name;\r\n            const label = bindingConfig.label;\r\n            /* handle timeout*/\r\n            if(this.timer){\r\n                clearTimeout(this.timer);\r\n            }\r\n            this.timer = setTimeout(() => {\r\n                this.updateConfig(name, this.tempCombo, label);\r\n                this.timer = null;\r\n            }, responseTime);\r\n\r\n            this.lastKeyTime = time;\r\n    }\r\n    protected onKeyPress(event: EventKeyboard) {\r\n        const keyCode = event.keyCode;\r\n    }\r\n\r\n    protected onKeyUp(event: EventKeyboard) {\r\n        const keyCode = event.keyCode;\r\n        const bindingConfig = this.tempBinding;\r\n        if (bindingConfig) {\r\n            return;\r\n        }\r\n        this.keyState.set(keyCode, false);\r\n        for (let keys of this.keyEventMap.keys()) {\r\n            let keystate = false\r\n            let length = keys.length;\r\n            for (var i = 0; i < length; i++) {\r\n                const key = keys[i];\r\n                if (keyCode == key) {\r\n                    keystate = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (keystate) {\r\n                const cb = this.keyEventMap.get(keys);\r\n                if (cb.up) cb.up();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst CTRL = new InputCtrl;\r\n\r\nexport default CTRL;\r\n"]}